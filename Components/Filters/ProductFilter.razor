@using ECommerceApp.Data
@using ECommerceApp.Services

@inject IProductApi ProductApi
<div class="d-flex justify-content-center align-items-center" style="gap:20px; margin-bottom:50px">
    @foreach (var category in Categories)
    {
        <div style="border-radius: 10px; width: 200px; overflow: hidden; height: 100px; cursor:pointer; box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.2); position: relative; @getActiveCategory(category.Name)" onclick="@(async () => await FilterByCategory(category.Name))">
            <img src="@category.Image" class="w-100 h-100" style="object-fit: cover" />
            <p style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; align-items: center; justify-content: center; background-color: rgba(0,0,0,0.3); margin: 0"><span class="text-white; text-center" style="font-weight: bold; text-transform: uppercase; font-size:18px; color: white">@category.Name</span></p>
        </div>
    }
    <div style="border-radius: 10px; width: 200px; overflow: hidden; height: 100px; cursor:pointer; box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.2);" class="d-flex flex-column p-2">
        <div class="text-center" style="font-weight: bold; font-size: 25px">PRICE SORT</div>
        <div style="flex: 1; gap: 10px" class="d-flex justify-content-center align-items-center">
            @* desc *@
            <img style="width: 30px; height: 30px; @getActiveSort("desc")" src="https://cdn3.iconfinder.com/data/icons/analytics-5/500/Analytics-13-512.png" onclick="@(async () => await SetSortAndFilter("desc"))" />
            @* asc *@
            <img src="https://cdn3.iconfinder.com/data/icons/analytics-5/500/Analytics-13-512.png" style="transform: rotate(180deg); width: 30px; height: 30px; @getActiveSort("asc")" onclick="@(async () => await SetSortAndFilter("asc"))" />
        </div>
    </div>
</div>


@code {
    public IEnumerable<ICategory> Categories = [];

    protected override async Task OnInitializedAsync()
    {
        Categories = await ProductApi.GetAllCategories();
    }


    [Parameter]
    public EventCallback<(string, string)> OnFilter { get; set; }
    private string currentSort = ""; // Default sort type
    private string currentCategory = "";

    private async Task FilterByCategory(string categoryName)
    {

        if (categoryName == "all")
            currentCategory = "";
        else currentCategory = categoryName;

        await OnFilter.InvokeAsync((currentCategory, currentSort));
    }

    private async Task SetSortAndFilter(string sort)
    {
        currentSort = sort;
        await OnFilter.InvokeAsync((currentCategory, currentSort));
    }

    private string getActiveCategory(string category)
    {
        var temp = "";
        if (category == "all")
        {
            temp = "";
        }
        else { temp = category; }

        return currentCategory == temp ? "box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;" : "filter: grayscale(100%); ";
    }

    private string getActiveSort(string sort)
    {
        return currentSort == sort ? "border: 1px gray solid; " : "opacity: 0.5; ";
    }
}
